// <auto-generated />
using System;
using AuthManager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AuthManager.Migrations
{
    [DbContext(typeof(AkashicDbContext))]
    partial class AkashicDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("AuthManager.Models.Access", b =>
                {
                    b.Property<int>("AccountsUid")
                        .HasColumnType("INT");

                    b.Property<int>("ServicesSid")
                        .HasColumnType("INT");

                    b.Property<bool>("Banned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("SuspensionEndAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME(6)")
                        .HasDefaultValueSql("NULL");

                    b.HasKey("AccountsUid", "ServicesSid");

                    b.HasIndex("ServicesSid");

                    b.ToTable("Accesses");
                });

            modelBuilder.Entity("AuthManager.Models.Account", b =>
                {
                    b.Property<int>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Uid"));

                    b.Property<bool>("Admin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT(1)")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("CreatedAt")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME(6)")
                        .HasDefaultValueSql("(UTC_TIMESTAMP)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("CHAR(64)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.Property<bool>("Verified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TINYINT(1)")
                        .HasDefaultValue(false);

                    b.HasKey("Uid");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("AuthManager.Models.Service", b =>
                {
                    b.Property<int>("Sid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Sid"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("SecretKey")
                        .IsRequired()
                        .HasColumnType("CHAR(64)");

                    b.HasKey("Sid");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Services");
                });

            modelBuilder.Entity("AuthManager.Models.Access", b =>
                {
                    b.HasOne("AuthManager.Models.Account", null)
                        .WithMany("Accesses")
                        .HasForeignKey("AccountsUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthManager.Models.Service", null)
                        .WithMany("Accesses")
                        .HasForeignKey("ServicesSid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthManager.Models.Account", b =>
                {
                    b.Navigation("Accesses");
                });

            modelBuilder.Entity("AuthManager.Models.Service", b =>
                {
                    b.Navigation("Accesses");
                });
#pragma warning restore 612, 618
        }
    }
}
